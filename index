<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DREAMPLEX 교육계획서 생성기</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, 'SF Pro Display', 'SF Pro', 'Apple SD Gothic Neo', 'Malgun Gothic', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 10px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            animation: slideUp 0.6s ease-out;
        }
        
        @keyframes slideUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            color: white;
            padding: 60px 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/><circle cx="10" cy="60" r="0.5" fill="white" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }

        .header::after {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        .logo {
            font-size: 4.5em;
            font-weight: 900;
            margin-bottom: 15px;
            letter-spacing: 8px;
            text-shadow: 0 4px 20px rgba(0,0,0,0.3);
            position: relative;
            z-index: 2;
            background: linear-gradient(45deg, #fff, #f0f0f0, #fff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: shimmer 3s ease-in-out infinite;
        }

        @keyframes shimmer {
            0%, 100% { background-position: -200% center; }
            50% { background-position: 200% center; }
        }

        .subtitle {
            font-size: 1.6em;
            font-weight: 300;
            opacity: 0.95;
            position: relative;
            z-index: 2;
            letter-spacing: 2px;
            text-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }

        .header-content {
            position: relative;
            z-index: 2;
        }

        .header-badge {
            display: inline-block;
            background: rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 50px;
            padding: 8px 20px;
            font-size: 0.9em;
            font-weight: 500;
            margin-top: 20px;
            letter-spacing: 1px;
        }
        
        .form-section {
            padding: 40px 30px;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        label {
            display: block;
            margin-bottom: 12px;
            font-weight: 600;
            color: #495057;
            font-size: 1.1em;
        }
        
        .school-select {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 16px;
            background: white;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .school-select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-1px);
        }
        
        .school-select:disabled {
            background: #e9ecef;
            color: #6c757d;
            cursor: not-allowed;
        }
        
        .button-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        button {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .generate-btn {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            flex: 1;
            min-width: 200px;
        }
        
        .generate-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);
        }
        
        .generate-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .refresh-btn {
            background: linear-gradient(135deg, #17a2b8 0%, #6f42c1 100%);
            color: white;
            min-width: 120px;
        }
        
        .refresh-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(23, 162, 184, 0.3);
        }
        
        .refresh-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .loading {
            text-align: center;
            padding: 60px 30px;
            background: #f8f9fa;
        }
        
        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid #e9ecef;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .loading p {
            color: #666;
            font-size: 1.1em;
        }
        
        .plan-result {
            padding: 30px;
            overflow: visible !important;
            height: auto !important;
        }
        
        /* 새로운 교육계획서 디자인 */
        .education-plan {
            background: white;
            position: relative;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        /* 장식용 원형 요소들 */
        .education-plan::before {
            content: '';
            position: absolute;
            top: -50px;
            left: -50px;
            width: 150px;
            height: 150px;
            background: linear-gradient(135deg, #a8e6cf 0%, #7fcdcd 100%);
            border-radius: 50%;
            opacity: 0.3;
            z-index: 0;
        }
        
        .education-plan::after {
            content: '';
            position: absolute;
            top: 100px;
            right: -80px;
            width: 200px;
            height: 200px;
            background: linear-gradient(135deg, #ffd3a5 0%, #fd9853 100%);
            border-radius: 50%;
            opacity: 0.2;
            z-index: 0;
        }
        
        .decoration-circle {
            position: absolute;
            border-radius: 50%;
            opacity: 0.15;
            z-index: 0;
        }
        
        .decoration-circle-1 {
            top: 60%;
            left: -30px;
            width: 120px;
            height: 120px;
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        }
        
        .decoration-circle-2 {
            bottom: -40px;
            right: 200px;
            width: 100px;
            height: 100px;
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        }
        
        .plan-content {
            position: relative;
            z-index: 1;
        }
        
        .plan-title {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .plan-title h1 {
            font-size: 2.5em;
            color: #2d5a27;
            font-weight: 900;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        
        .plan-title .highlight {
            background: linear-gradient(135deg, #ffd700 0%, #ffed4e 100%);
            padding: 5px 15px;
            border-radius: 20px;
            display: inline-block;
            color: #2d5a27;
            font-weight: 700;
        }
        
        .plan-title h2 {
            font-size: 2.2em;
            color: #27ae60;
            font-weight: 800;
            margin-top: 15px;
        }
        
        .section {
            margin-bottom: 40px;
        }
        
        .section-title {
            background: linear-gradient(135deg, #ff8c00 0%, #ff6b35 100%);
            color: white;
            padding: 8px 18px;
            border-radius: 12px;
            text-align: center;
            font-size: 1.1em;
            font-weight: 400;
            margin-bottom: 18px;
            box-shadow: 0 2px 6px rgba(255, 140, 0, 0.18);
        }
        
        .basic-info {
            display: grid;
            gap: 15px;
        }
        
        .info-row {
            display: flex;
            align-items: center;
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            min-height: 60px;
        }
        
        .info-label {
            background: #27ae60;
            color: white;
            padding: 20px 25px;
            font-weight: 600;
            min-width: 120px;
            text-align: center;
            border-radius: 15px 0 0 15px;
        }
        
        .info-content {
            padding: 20px 25px;
            flex: 1;
            font-weight: 500;
            color: #2c3e50;
            font-size: 1.3em;
        }
        
        .info-content[contenteditable="true"]:focus {
            outline: 2px solid #27ae60;
            background: #f8fff8;
            border-radius: 0 15px 15px 0;
        }
        
        .program-grid {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        /* 프로그램 테이블 동적 컬럼 너비 스타일 */
        .program-grid.table-3cols .program-header,
        .program-grid.table-3cols .program-row {
            grid-template-columns: 2fr 1fr 1fr;
        }

        .program-grid.table-4cols .program-header,
        .program-grid.table-4cols .program-row {
            grid-template-columns: 2fr 1fr 1fr 1fr;
        }

        .program-grid.table-5cols .program-header,
        .program-grid.table-5cols .program-row {
            grid-template-columns: 2fr 1fr 1fr 1fr 1fr;
        }

        .program-header {
            background: #27ae60;
            color: white;
            display: grid;
            gap: 1px;
        }
        
        .program-header div {
            padding: 20px;
            text-align: center;
            font-weight: 600;
            font-size: 1.1em;
        }
        
        .program-row {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr;
            gap: 1px;
            background: #27ae60;
        }
        
        .program-cell {
            background: white;
            padding: 18px 20px;
            text-align: center;
            font-weight: 500;
            color: #2c3e50;
            transition: all 0.3s ease;
            font-size: 1.22em;
        }
        
        .program-cell:hover {
            background: #f8fff8;
        }
        
        .program-cell[contenteditable="true"]:focus {
            outline: 2px solid #27ae60;
            background: #f8fff8;
        }
        
        .program-row:nth-child(even) .program-cell {
            background: #f8f9fa;
        }
        
        .program-row:nth-child(even) .program-cell:hover,
        .program-row:nth-child(even) .program-cell[contenteditable="true"]:focus {
            background: #f8fff8;
        }
        
        .schedule-grid {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }
        
        .schedule-header {
            background: #27ae60;
            color: white;
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 1px;
        }
        
        .schedule-header div {
            padding: 20px;
            text-align: center;
            font-weight: 600;
            font-size: 1.1em;
        }
        
        .schedule-row {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 1px;
            background: #27ae60;
        }
        
        .schedule-cell {
            background: white;
            padding: 18px 20px;
            font-weight: 500;
            color: #2c3e50;
            transition: all 0.3s ease;
            font-size: 1.22em;
        }
        
        .schedule-cell:first-child {
            text-align: center;
            font-weight: 600;
            background: #f8f9fa;
        }
        
        .schedule-cell:hover {
            background: #f8fff8;
        }
        
        .schedule-cell[contenteditable="true"]:focus {
            outline: 2px solid #27ae60;
            background: #f8fff8;
        }
        
        .schedule-row:nth-child(even) .schedule-cell {
            background: #f8f9fa;
        }
        
        .schedule-row:nth-child(even) .schedule-cell:first-child {
            background: #e9ecef;
        }
        
        .schedule-row:nth-child(even) .schedule-cell:hover,
        .schedule-row:nth-child(even) .schedule-cell[contenteditable="true"]:focus {
            background: #f8fff8;
        }
        
        .note-box {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            border-left: 5px solid #ffc107;
            padding: 20px 25px;
            border-radius: 0 15px 15px 0;
            margin: 25px 0;
            color: #856404;
            font-weight: 500;
            position: relative;
        }
        
        .note-box::before {
            content: '💡';
            font-size: 1.2em;
            margin-right: 10px;
        }
        
        .download-section {
            text-align: center;
            padding: 30px 20px;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
        }
        
        .download-btn {
            background: linear-gradient(135deg, #fd7e14 0%, #e83e8c 100%);
            color: white;
            margin: 0 8px;
            min-width: 150px;
        }
        
        .download-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(253, 126, 20, 0.3);
        }
        
        .save-btn {
            background: linear-gradient(135deg, #6f42c1 0%, #007bff 100%);
            color: white;
            margin: 0 8px;
            min-width: 150px;
        }
        
        .save-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(111, 66, 193, 0.3);
        }
        
        .tab-container {
            margin-bottom: 25px;
        }
        .tab-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .tab-button {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            background: #e9ecef;
            color: #495057;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }
        .tab-button.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
        }
        .tab-content { display: none; }
        .tab-content.active { display: block; }

        .contact-form,
        .contact-list {
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        .contact-list { margin-top: 20px; }
        .contact-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #e9ecef;
            font-size: 0.95em;
        }
        .contact-item:last-child { border-bottom: none; }
        .delete-btn {
            background: #dc3545;
            color: #fff;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.85em;
        }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            border: 1px solid #f5c6cb;
        }

        .success-message {
            background: #d1edda;
            color: #155724;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            border: 1px solid #c3e6cb;
        }

        .date-select {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .date-option {
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            background: white;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
            font-size: 0.9em;
        }

        .date-option:hover {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .date-option.selected {
            border-color: #667eea;
            background: #667eea;
            color: white;
        }

        .month-select {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .month-option {
            padding: 15px 20px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            background: white;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
            font-weight: 600;
            color: #495057;
        }

        .month-option:hover {
            border-color: #667eea;
            background: #f8f9ff;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
        }

        .month-option.selected {
            border-color: #667eea;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .data-status {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            border-left: 4px solid #17a2b8;
            font-size: 0.9em;
        }

        .data-status.loading {
            border-left-color: #ffc107;
            background: #fff3cd;
        }

        .data-status.success {
            border-left-color: #28a745;
            background: #d1edda;
        }

        .data-status.error {
            border-left-color: #dc3545;
            background: #f8d7da;
        }

        .location-radio {
            display: flex;
            gap: 20px;
            margin-top: 10px;
        }

        .location-radio label {
            display: flex;
            align-items: center;
            gap: 5px;
            font-weight: 500;
            color: #495057;
        }

        @media print {
            .download-section, .save-btn { display: none !important; }
            .education-plan::before, .education-plan::after, .decoration-circle { display: none !important; }
            .education-plan {
                box-shadow: none !important;
                border: 1px solid #ddd;
            }
        }

        @media (max-width: 768px) {
            body { padding: 5px; }
            .container { border-radius: 10px; }
            .header { padding: 30px 20px; }
            .logo { font-size: 2.2em; letter-spacing: 2px; }
            .subtitle { font-size: 1.2em; }
            .form-section { padding: 25px 20px; }
            .button-group { flex-direction: column; }
            .generate-btn, .refresh-btn { min-width: auto; width: 100%; }
            .plan-result { padding: 20px 15px; }
            .education-plan { padding: 25px 20px; }
            .plan-title h1 { font-size: 2em; }
            .plan-title h2 { font-size: 1.8em; }
            .info-label { min-width: 100px; padding: 15px 20px; font-size: 0.9em; }
            .program-header, .program-row { grid-template-columns: 2fr 1fr 1fr; }
            .schedule-header, .schedule-row { grid-template-columns: 1fr 2fr; }
        }

        .program-cell, .schedule-cell {
            font-size: 1.22em;
        }

        /* 대기업 스타일 헤더 */
        .plan-title.corporate {
            text-align: center;
            margin-bottom: 40px;
            padding-top: 30px;
            padding-bottom: 30px;
            background: linear-gradient(90deg, #e9ecef 0%, #f8f9fa 100%);
            border-radius: 0 0 32px 32px;
            box-shadow: 0 8px 32px rgba(44,62,80,0.08);
            position: relative;
        }
        .plan-title.corporate .brand-row {
            display: flex;
            justify-content: center;
            align-items: baseline;
            gap: 18px;
            margin-bottom: 18px;
        }
        .dreamflex-logo {
            font-family: -apple-system, 'SF Pro Display', 'SF Pro', 'Apple SD Gothic Neo', 'Malgun Gothic', sans-serif;
            font-size: 2.6em;
            font-weight: 900;
            letter-spacing: 0.12em;
            color: #1a2a3a;
            text-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }
        .slogan {
            font-family: -apple-system, 'SF Pro Display', 'SF Pro', 'Apple SD Gothic Neo', 'Malgun Gothic', sans-serif;
            font-size: 1.2em;
            font-weight: 600;
            color: #f5b800;
            background: none;
            letter-spacing: 0.08em;
        }
        .main-title {
            font-family: -apple-system, 'SF Pro Display', 'SF Pro', 'Apple SD Gothic Neo', 'Malgun Gothic', sans-serif;
            font-size: 2.8em;
            font-weight: 900;
            color: #1769aa;
            letter-spacing: 0.04em;
            margin-top: 10px;
            margin-bottom: 0;
            text-shadow: 0 2px 8px rgba(23,105,170,0.08);
            border-bottom: 2px solid #f5b800;
            display: inline-block;
            padding-bottom: 8px;
        }

        /* 트렌디 스타일 헤더 */
        .plan-title.trendy {
            text-align: center;
            margin-bottom: 60px;
            padding: 40px 0;
            border-bottom: 1px solid #eee;
        }
        .plan-title.trendy .brand-mark {
            display: inline-block;
            font-size: 1.2em;
            font-weight: 600;
            letter-spacing: 2px;
            color: #fff;
            background: linear-gradient(135deg, #6e8efb 0%, #a777e3 100%);
            padding: 8px 18px;
            border-radius: 20px;
            margin-bottom: 30px;
            text-transform: uppercase;
        }
        .plan-title.trendy h1 {
            font-family: -apple-system, 'SF Pro Display', 'SF Pro', 'Apple SD Gothic Neo', 'Malgun Gothic', sans-serif;
            font-size: 3.5em;
            font-weight: 900;
            color: #2c3e50;
            margin: 0 0 10px 0;
        }
        .plan-title.trendy h2 {
            font-family: -apple-system, 'SF Pro Display', 'SF Pro', 'Apple SD Gothic Neo', 'Malgun Gothic', sans-serif;
            font-size: 2em;
            font-weight: 300;
            color: #7f8c8d;
            margin: 0;
            letter-spacing: 4px;
        }

        /* 교통비 계산 관련 스타일 */
        .transport-tab {
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .route-info {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            border-left: 4px solid #2196f3;
        }

        .cost-breakdown {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .cost-item {
            background: white;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .cost-item .amount {
            font-size: 1.5em;
            font-weight: bold;
            color: #2196f3;
        }

        .carpool-info {
            background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            border-left: 4px solid #ff9800;
        }

        .carpool-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }

        .carpool-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border: 2px solid #ff9800;
        }

        .carpool-card .passengers {
            font-size: 1.2em;
            font-weight: bold;
            color: #ff9800;
        }

        .carpool-card .cost {
            font-size: 1.1em;
            color: #333;
            margin-top: 5px;
        }

        .kakao-share-btn {
            background: linear-gradient(135deg, #fee500 0%, #ffd700 100%);
            color: #3c1e1e;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            margin: 10px 5px;
            transition: all 0.3s ease;
        }

        .kakao-share-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(254, 229, 0, 0.4);
        }

        .fuel-settings {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
        }

        .fuel-settings input {
            width: 100px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin: 0 10px;
        }

        .route-details {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            border: 1px solid #e9ecef;
        }

        .route-details .detail-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .route-details .detail-item:last-child {
            border-bottom: none;
        }

        .loading-route {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .loading-route .spinner {
            width: 30px;
            height: 30px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #2196f3;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @media (max-width: 768px) {
            .cost-breakdown {
                grid-template-columns: 1fr;
            }
            .carpool-cards {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-content">
                <div class="logo">DREAMPLEX</div>
                <div class="subtitle">드림플렉스 교육계획서 생성기</div>
                <div class="header-badge">AI 기반 교육 솔루션</div>
            </div>
        </div>
        
        <div class="form-section">
            <div id="dataStatus" class="data-status" style="display: none;">
                <div id="statusMessage">준비 중...</div>
            </div>

            <div class="tab-container">
                <div class="tab-buttons">
                    <button class="tab-button active" onclick="switchTab('plan')">계획서 생성</button>
                    <button class="tab-button" onclick="switchTab('contact')">담당자 등록</button>
                    <button class="tab-button" onclick="switchTab('transport')">교통비 계산</button>
                </div>

                <div id="planTab" class="tab-content active">
                    <div class="form-group">
                        <label>📅 월 선택</label>
                        <div id="monthOptions" class="month-select"></div>
                    </div>

                    <div class="form-group">
                        <label for="schoolSelect">🏫 학교 선택</label>
                        <select id="schoolSelect" class="school-select" disabled>
                            <option value="">먼저 월을 선택하세요...</option>
                        </select>
                    </div>
                    
                    <div id="dateSelectionContainer" class="form-group" style="display: none;">
                        <label>📅 교육 날짜 선택</label>
                        <div id="dateOptions" class="date-select"></div>
                    </div>
                    
                    <div class="form-group">
                        <label for="contactSelect">👤 담당자 선택</label>
                        <select id="contactSelect" class="school-select">
                            <option value="">담당자를 선택하세요...</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>📍 위치 배정 방식</label>
                        <div class="location-radio">
                            <label><input type="radio" name="locationAssignment" value="pre" checked> 사전 배정</label>
                            <label><input type="radio" name="locationAssignment" value="onsite"> 현장 배정</label>
                        </div>
                    </div>
                </div>

                <div id="contactTab" class="tab-content">
                    <div class="contact-form">
                        <div class="form-group">
                            <label for="contactPosition">직책</label>
                            <input type="text" id="contactPosition" class="school-select" placeholder="예: 교사">
                        </div>
                        <div class="form-group">
                            <label for="contactName">이름</label>
                            <input type="text" id="contactName" class="school-select" placeholder="예: 홍길동">
                        </div>
                        <div class="form-group">
                            <label for="contactPhone">전화번호</label>
                            <input type="tel" id="contactPhone" class="school-select" placeholder="예: 010-1234-5678">
                        </div>
                        <button onclick="addContact()" class="generate-btn">등록</button>
                    </div>
                    <div id="contactList" class="contact-list"></div>
                </div>

                <div id="transportTab" class="tab-content">
                    <div class="transport-tab">
                        <h3>🚗 교통비 계산</h3>
                        
                        <div class="fuel-settings">
                            <label>⛽ 연비 설정 (km/L): <input type="number" id="fuelEfficiency" value="12" min="1" max="50"></label>
                            <label>💰 유류비 (원/L): <input type="number" id="fuelPrice" value="1700" min="1000" max="3000"></label>
                        </div>

                        <div id="routeCalculation" style="display: none;">
                            <div class="route-info">
                                <h4>📍 경로 정보</h4>
                                <div id="routeDetails" class="route-details">
                                    <div class="detail-item">
                                        <span>출발지:</span>
                                        <span>대구광역시</span>
                                    </div>
                                    <div class="detail-item">
                                        <span>목적지:</span>
                                        <span id="destinationSchool"></span>
                                    </div>
                                    <div class="detail-item">
                                        <span>총 거리:</span>
                                        <span id="totalDistance"></span>
                                    </div>
                                    <div class="detail-item">
                                        <span>예상 소요시간:</span>
                                        <span id="estimatedTime"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="cost-breakdown">
                                <div class="cost-item">
                                    <div>⛽ 왕복 연료비</div>
                                    <div class="amount" id="fuelCost">-</div>
                                </div>
                                <div class="cost-item">
                                    <div>🛣️ 왕복 통행료</div>
                                    <div class="amount" id="tollCost">-</div>
                                </div>
                                <div class="cost-item">
                                    <div>💰 총 교통비</div>
                                    <div class="amount" id="totalCost">-</div>
                                </div>
                            </div>

                            <div class="carpool-info">
                                <h4>👥 카풀비 안내</h4>
                                <div class="carpool-cards">
                                    <div class="carpool-card">
                                        <div class="passengers">2명</div>
                                        <div class="cost" id="carpool2">-</div>
                                    </div>
                                    <div class="carpool-card">
                                        <div class="passengers">3명</div>
                                        <div class="cost" id="carpool3">-</div>
                                    </div>
                                    <div class="carpool-card">
                                        <div class="passengers">4명</div>
                                        <div class="cost" id="carpool4">-</div>
                                    </div>
                                </div>
                                
                                <button class="kakao-share-btn" onclick="copyKakaoText()">
                                    📋 카톡용 텍스트 복사
                                </button>
                            </div>
                        </div>

                        <div id="loadingRoute" class="loading-route" style="display: none;">
                            <div class="spinner"></div>
                            <p>경로를 계산하고 있습니다...</p>
                        </div>

                        <div id="noRouteData" style="text-align: center; padding: 40px; color: #666;">
                            <p>📋 먼저 교육계획서를 생성해주세요.</p>
                            <p>계획서 생성 후 자동으로 교통비가 계산됩니다.</p>
                            <br>
                            <button class="kakao-share-btn" onclick="showGoogleAppsScriptGuide()" style="background: linear-gradient(135deg, #17a2b8 0%, #6f42c1 100%);">
                                🔧 Google Apps Script 설정 가이드
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="button-group">
                <label style="display:inline-block;">
                    <input type="file" id="csvUpload" accept=".csv" style="display:none;" onchange="handleCSVUpload(event)">
                    <button type="button" class="refresh-btn" style="background:linear-gradient(135deg,#fd7e14 0%,#20c997 100%);color:white;" onclick="document.getElementById('csvUpload').click();">📁 CSV 업로드</button>
                </label>
                <button onclick="generatePlan()" id="generateBtn" class="generate-btn" disabled>
                    📋 계획서 생성하기
                </button>
            </div>
        </div>
        
        <div id="loading" class="loading" style="display:none;">
            <div class="spinner"></div>
            <p>교육계획서를 생성하고 있습니다...</p>
        </div>
        
        <div id="planResult" class="plan-result"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.min.js"></script>
    <script>
        var schoolData = [];
        var dataByMonth = {};
        var contacts = [];
        var selectedMonth = null;
        var selectedDate = null;
        var isDataLoaded = false;
        var planData = null;

        function updateStatus(type, message) {
            var statusDiv = document.getElementById('dataStatus');
            var statusMessage = document.getElementById('statusMessage');
            statusDiv.style.display = 'block';
            statusDiv.className = 'data-status ' + type;
            statusMessage.textContent = message;
        }

        function extractMonth(dateString) {
            if (!dateString) return null;
            var match = dateString.match(/25\.(\d{2})\./);
            if (match) {
                var month = parseInt(match[1]);
                return '2025-' + (month < 10 ? '0' + month : month);
            }
            return null;
        }

        function groupDataByMonth(data) {
            var grouped = {};
            for (var i = 0; i < data.length; i++) {
                var item = data[i];
                var month = extractMonth(item['체험일']);
                if (month) {
                    if (!grouped[month]) {
                        grouped[month] = [];
                    }
                    grouped[month].push(item);
                }
            }
            return grouped;
        }

        function handleCSVUpload(event) {
            var file = event.target.files[0];
            if (!file) {
                updateStatus('error', '❌ 파일을 선택해주세요.');
                return;
            }
            if (!file.name.endsWith('.csv')) {
                updateStatus('error', '❌ CSV 파일만 업로드 가능합니다.');
                event.target.value = '';
                return;
            }
            updateStatus('loading', '🔄 CSV 파일을 처리하는 중...');
            var reader = new FileReader();
            reader.onload = function(e) {
                Papa.parse(e.target.result, {
                    header: true,
                    skipEmptyLines: true,
                    encoding: 'UTF-8',
                    complete: function(results) {
                        try {
                            var data = results.data;
                            if (!data || data.length === 0) {
                                throw new Error('CSV 파일이 비어 있습니다.');
                            }
                            var requiredHeaders = ['체험일', '학교', '수업', '수업시간', '차시'];
                            var headers = Object.keys(data[0] || {});
                            var missingHeaders = requiredHeaders.filter(h => !headers.includes(h));
                            if (missingHeaders.length > 0) {
                                throw new Error('필수 열이 누락되었습니다: ' + missingHeaders.join(', '));
                            }
                            schoolData = data.map(row => {
                                var rowObj = {};
                                headers.forEach(h => {
                                    rowObj[h] = row[h] !== null && row[h] !== undefined ? row[h].toString() : '';
                                });
                                return rowObj;
                            }).filter(row => row['체험일'] && row['학교'] && row['수업시간'] && row['차시']);
                            if (schoolData.length === 0) {
                                throw new Error('유효한 데이터가 없습니다.');
                            }
                            dataByMonth = groupDataByMonth(schoolData);
                            isDataLoaded = true;
                            var monthCount = Object.keys(dataByMonth).length;
                            updateStatus('success', '✅ 성공! ' + schoolData.length + '개의 교육 일정을 불러왔습니다. (' + monthCount + '개월, 최종 업데이트: ' + new Date().toLocaleString() + ')');
                            updateMonthOptions();
                            event.target.value = '';
                        } catch (error) {
                            console.error('CSV 처리 오류:', error);
                            updateStatus('error', '❌ CSV 처리 중 오류가 발생했습니다: ' + error.message);
                            event.target.value = '';
                        }
                    },
                    error: function(error) {
                        console.error('CSV 파싱 오류:', error);
                        updateStatus('error', '❌ CSV 파싱 중 오류가 발생했습니다: ' + error.message);
                        event.target.value = '';
                    }
                });
            };
            reader.readAsText(file);
        }

        function updateMonthOptions() {
            var monthContainer = document.getElementById('monthOptions');
            monthContainer.innerHTML = '';
            var availableMonths = Object.keys(dataByMonth).sort();
            if (availableMonths.length === 0) {
                monthContainer.innerHTML = '<div style="text-align: center; color: #6c757d; padding: 20px;">사용 가능한 월이 없습니다. CSV 파일을 업로드하세요.</div>';
                return;
            }
            var monthNames = {
                '2025-06': '2025년 6월',
                '2025-07': '2025년 7월',
                '2025-08': '2025년 8월',
                '2025-09': '2025년 9월',
                '2025-10': '2025년 10월',
                '2025-11': '2025년 11월',
                '2025-12': '2025년 12월'
            };
            for (var i = 0; i < availableMonths.length; i++) {
                var month = availableMonths[i];
                var monthDiv = document.createElement('div');
                monthDiv.className = 'month-option';
                monthDiv.setAttribute('data-month', month);
                monthDiv.onclick = function() { selectMonth(this.getAttribute('data-month'), this); };
                var schools = {};
                for (var j = 0; j < dataByMonth[month].length; j++) {
                    schools[dataByMonth[month][j]['학교']] = true;
                }
                var schoolCount = Object.keys(schools).length;
                monthDiv.innerHTML = (monthNames[month] || month) + '<br><small style="opacity: 0.8;">' + schoolCount + '개 학교</small>';
                monthContainer.appendChild(monthDiv);
            }
        }

        function selectMonth(month, element) {
            var monthOptions = document.querySelectorAll('.month-option');
            for (var i = 0; i < monthOptions.length; i++) {
                monthOptions[i].classList.remove('selected');
            }
            element.classList.add('selected');
            selectedMonth = month;
            updateSchoolSelect();
            resetDateSelection();
            checkGenerateBtn();
        }

        function updateSchoolSelect() {
            var schoolSelect = document.getElementById('schoolSelect');
            if (!selectedMonth || !dataByMonth[selectedMonth]) {
                schoolSelect.innerHTML = '<option value="">먼저 월을 선택하세요...</option>';
                schoolSelect.disabled = true;
                return;
            }
            var monthData = dataByMonth[selectedMonth];
            var schools = {};
            for (var i = 0; i < monthData.length; i++) {
                var school = monthData[i]['학교'];
                if (school) {
                    schools[school] = schools[school] || [];
                    schools[school].push(monthData[i]['체험일']);
                }
            }
            var uniqueSchools = Object.keys(schools).sort((a, b) => {
                var latestDateA = Math.max(...schools[a].map(date => new Date(date.replace(/\./g, '-')).getTime()));
                var latestDateB = Math.max(...schools[b].map(date => new Date(date.replace(/\./g, '-')).getTime()));
                return latestDateB - latestDateA;
            });
            schoolSelect.disabled = false;
            schoolSelect.innerHTML = '<option value="">학교를 선택하세요...</option>';
            for (var i = 0; i < uniqueSchools.length; i++) {
                var school = uniqueSchools[i];
                var uniqueDates = [...new Set(schools[school])].sort((a, b) => new Date(b.replace(/\./g, '-')).getTime() - new Date(a.replace(/\./g, '-')).getTime()).join(', ');
                var option = document.createElement('option');
                option.value = school;
                option.textContent = school + ' (' + uniqueDates + ')';
                schoolSelect.appendChild(option);
            }
        }

        function onSchoolSelect() {
            var selectedSchool = document.getElementById('schoolSelect').value;
            var dateContainer = document.getElementById('dateSelectionContainer');
            var dateOptions = document.getElementById('dateOptions');
            if (selectedSchool && selectedMonth) {
                var schoolSchedules = dataByMonth[selectedMonth].filter(function(item) {
                    return item['학교'] === selectedSchool;
                });
                var dates = {};
                for (var i = 0; i < schoolSchedules.length; i++) {
                    var date = schoolSchedules[i]['체험일'];
                    if (date) {
                        dates[date] = true;
                    }
                }
                var uniqueDates = Object.keys(dates).sort().reverse();
                if (uniqueDates.length > 0) {
                    dateOptions.innerHTML = '';
                    for (var i = 0; i < uniqueDates.length; i++) {
                        var date = uniqueDates[i];
                        var dateDiv = document.createElement('div');
                        dateDiv.className = 'date-option';
                        dateDiv.setAttribute('data-date', date);
                        dateDiv.onclick = function() { selectDate(this.getAttribute('data-date'), this); };
                        var programCount = schoolSchedules.filter(function(item) {
                            return item['체험일'] === date;
                        }).length;
                        dateDiv.innerHTML = date + '<br><small style="opacity: 0.8;">' + programCount + '개 프로그램</small>';
                        dateOptions.appendChild(dateDiv);
                    }
                    dateContainer.style.display = 'block';
                } else {
                    dateContainer.style.display = 'none';
                }
            } else {
                dateContainer.style.display = 'none';
            }
            selectedDate = null;
            checkGenerateBtn();
        }

        function resetDateSelection() {
            document.getElementById('dateSelectionContainer').style.display = 'none';
            selectedDate = null;
        }

        function selectDate(date, element) {
            var dateOptions = document.querySelectorAll('.date-option');
            for (var i = 0; i < dateOptions.length; i++) {
                dateOptions[i].classList.remove('selected');
            }
            element.classList.add('selected');
            selectedDate = date;
            checkGenerateBtn();
        }

        function checkGenerateBtn() {
            var school = document.getElementById('schoolSelect').value;
            var contact = document.getElementById('contactSelect').value;
            var canGenerate = school && selectedMonth && selectedDate && contact && isDataLoaded;
            document.getElementById('generateBtn').disabled = !canGenerate;
        }

        document.getElementById('schoolSelect').addEventListener('change', onSchoolSelect);
        document.getElementById('contactSelect').addEventListener('change', checkGenerateBtn);

        function switchTab(tabName) {
            var tabs = document.querySelectorAll('.tab-content');
            var buttons = document.querySelectorAll('.tab-button');
            for (var i = 0; i < tabs.length; i++) {
                tabs[i].classList.remove('active');
            }
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove('active');
            }
            document.getElementById(tabName + 'Tab').classList.add('active');
            document.querySelector('.tab-button[onclick="switchTab(\'' + tabName + '\')"]').classList.add('active');
        }

        function addContact() {
            var position = document.getElementById('contactPosition').value.trim();
            var name = document.getElementById('contactName').value.trim();
            var phone = document.getElementById('contactPhone').value.trim();
            if (!position || !name || !phone) {
                alert('모든 정보를 입력해주세요.');
                return;
            }
            var info = position + ' ' + name + ' (' + phone + ')';
            contacts.push({ position: position, name: name, phone: phone, info: info });
            updateContactList();
            updateContactSelect();
            clearContactForm();
            alert('담당자가 등록되었습니다.');
        }

        function updateContactList() {
            var list = document.getElementById('contactList');
            if (contacts.length === 0) {
                list.innerHTML = '<p style="color:#666;">등록된 담당자가 없습니다.</p>';
                return;
            }
            var html = '';
            for (var i = 0; i < contacts.length; i++) {
                var c = contacts[i];
                html += '<div class="contact-item">' +
                       '<span>' + c.info + '</span>' +
                       '<button class="delete-btn" onclick="deleteContact(' + i + ')">삭제</button>' +
                       '</div>';
            }
            list.innerHTML = html;
        }

        function updateContactSelect() {
            var select = document.getElementById('contactSelect');
            var html = '<option value="">담당자를 선택하세요...</option>';
            for (var i = 0; i < contacts.length; i++) {
                var c = contacts[i];
                html += '<option value="' + c.info + '">' + c.info + '</option>';
            }
            select.innerHTML = html;
            checkGenerateBtn();
        }

        function deleteContact(idx) {
            if (confirm('삭제하시겠습니까?')) {
                contacts.splice(idx, 1);
                updateContactList();
                updateContactSelect();
            }
        }

        function clearContactForm() {
            document.getElementById('contactPosition').value = '';
            document.getElementById('contactName').value = '';
            document.getElementById('contactPhone').value = '';
        }

        function generatePlan() {
            var schoolName = document.getElementById('schoolSelect').value;
            var contactInfo = document.getElementById('contactSelect').value;
            var locationAssignment = document.querySelector('input[name="locationAssignment"]:checked').value;
            if (!schoolName || !selectedMonth || !selectedDate || !contactInfo) {
                alert('모든 정보를 선택해주세요.');
                return;
            }
            document.getElementById('loading').style.display = 'block';
            document.getElementById('planResult').innerHTML = '';
            setTimeout(() => {
                displayPlan(schoolName, selectedDate, contactInfo, locationAssignment);
                document.getElementById('loading').style.display = 'none';
                document.getElementById('planResult').scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 2000);
        }

        function displayPlan(schoolName, selectedDate, contactInfo, locationAssignment) {
            var resultDiv = document.getElementById('planResult');
            var schoolSchedules = dataByMonth[selectedMonth].filter(function(item) {
                return item['체험일'] === selectedDate && item['학교'] === schoolName;
            });
            if (schoolSchedules.length === 0) {
                resultDiv.innerHTML = '<div class="error-message">' +
                    '선택된 날짜(' + selectedDate + ')와 학교(' + schoolName + ')에 대한 교육 데이터가 없습니다.' +
                    '</div>';
                return;
            }
            var timeRange = schoolSchedules[0]['수업시간'] || '09:00 ~ 12:30';
            var totalClasses = parseInt(schoolSchedules[0]['차시']) || 4;
            var schoolType = schoolName.includes('고등학교') ? 'high' : 
                            schoolName.includes('중학교') ? 'middle' : 'elementary';
            var lessonDuration = (schoolType === 'high') ? 50 : 
                               (schoolType === 'middle') ? 45 : 40; // 고등학교 50분, 중학교 45분, 초등학교 40분

            var programs = [];
            for (var i = 0; i < schoolSchedules.length; i++) {
                var item = schoolSchedules[i];
                var location = locationAssignment === 'pre' ? (item['학년'] || '전체') : '현장 배정';
                
                // 학년 표시 처리
                if (location !== '현장 배정' && location !== '전체') {
                    if (/^\d+$/.test(location)) {
                        location = location + '학년';
                    } else if (!location.includes('학년')) {
                        location = location + '학년';
                    }
                }
                
                programs.push({
                    name: item['수업'] || '미정',
                    instructor: item['강사이름'] || '미정',
                    location: location
                });
            }

            var schedule = generateScheduleFromTime(timeRange, totalClasses, schoolType);
            planData = {
                school: {
                    name: schoolName,
                    date: selectedDate,
                    location: schoolSchedules[0]['지역'] || '위치 미정',
                    totalClasses: schoolSchedules[0]['차시'] || '미정',
                    time: timeRange,
                    contact: contactInfo
                },
                programs: programs,
                schedule: schedule,
                locationAssignment: locationAssignment,
                schoolSchedules: schoolSchedules // schoolSchedules를 planData에 추가
            };
            renderPlan();
            
            // 교통비 계산 자동 실행
            setTimeout(() => {
                calculateTransportCost();
            }, 1000);
        }

        function renderPlan() {
            var resultDiv = document.getElementById('planResult');
            var schoolNameWithLocation = planData.school.name;
            if (planData.school.location && planData.school.location !== '위치 미정') {
                schoolNameWithLocation += ' (' + planData.school.location + ')';
            }
            // 대상 학년 추출 및 중복 방지
            var grade = '';
            var classCount = '';
            var studentCount = '';
            
            if (planData.programs && planData.programs.length > 0) {
                var firstLocation = planData.programs[0].location;
                // 숫자만 있으면 학년 붙이기, 이미 학년 포함이면 그대로
                if (/^\d+$/.test(firstLocation)) {
                    grade = firstLocation + '학년';
                } else if (firstLocation.includes('학년')) {
                    grade = firstLocation.replace(/(학년)+/, '학년');
                } else {
                    grade = firstLocation;
                }

                // 반인원수 정보 처리
                var studentCounts = planData.schoolSchedules
                    .map(item => item['반인원수'])
                    .filter(count => count && !isNaN(parseInt(count)))
                    .map(count => parseInt(count));

                if (studentCounts.length > 0) {
                    var avgCount = Math.round(studentCounts.reduce((a, b) => a + b, 0) / studentCounts.length);
                    studentCount = ' (약 반당 ' + avgCount + '명)';
                }
            } else {
                grade = '학년';
            }
            var html = '<div class="education-plan">' +
                '<div class="decoration-circle decoration-circle-1"></div>' +
                '<div class="decoration-circle decoration-circle-2"></div>' +
                '<div class="plan-content">' +
                '<div class="plan-title trendy">' +
                '    <span class="brand-mark">DREAMPLEX</span>' +
                '    <h1>' + planData.school.name + '</h1>' +
                '    <h2>교육계획서</h2>' +
                '</div>' +
                
                '<div class="section">' +
                '<div class="section-title">기본사항</div>' +
                '<div class="basic-info">' +
                '<div class="info-row">' +
                '<div class="info-label">장소</div>' +
                '<div class="info-content" contenteditable="true">' + schoolNameWithLocation + '</div>' +
                '</div>' +
                '<div class="info-row">' +
                '<div class="info-label">일시</div>' +
                '<div class="info-content" contenteditable="true">' + planData.school.date + '</div>' +
                '</div>' +
                '<div class="info-row">' +
                '<div class="info-label">대상</div>' +
                '<div class="info-content" contenteditable="true">' + grade + studentCount + '</div>' +
                '</div>' +
                '<div class="info-row">' +
                '<div class="info-label">시간</div>' +
                '<div class="info-content" contenteditable="true">' + planData.school.time + '</div>' +
                '</div>' +
                '<div class="info-row">' +
                '<div class="info-label">위치</div>' +
                '<div class="info-content" contenteditable="true">본관 현관 (미리 도착한 경우 차에서 기다려주세요.)</div>' +
                '</div>' +
                '<div class="info-row">' +
                '<div class="info-label">담당자</div>' +
                '<div class="info-content" contenteditable="true">' + planData.school.contact + '</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                
                '<div class="section">' +
                '<div class="section-title">프로그램</div>' +
                '<div class="program-grid">';

            // AI교육 여부 확인
            var isAIEducation = planData.programs.some(program => 
                program.name.includes('AI미래학교') || 
                program.name.includes('AI기업가정신') || 
                program.name.includes('기업가정신')
            );

            // 차시 수 확인
            var totalClasses = parseInt(planData.school.totalClasses) || 4;

            // 테이블 클래스 설정
            if (isAIEducation || totalClasses === 2) {
                html = html.replace('class="program-grid">', 'class="program-grid table-3cols">');
            } else if (totalClasses === 4) {
                html = html.replace('class="program-grid">', 'class="program-grid table-4cols">');
            } else if (totalClasses === 6) {
                html = html.replace('class="program-grid">', 'class="program-grid table-5cols">');
            }

            // 테이블 헤더 생성
            if (isAIEducation || totalClasses === 2) {
                // AI교육 또는 2차시: 3칸 테이블
                html += '<div class="program-header">' +
                    '<div>프로그램</div>' +
                    '<div>강사</div>' +
                    '<div>위치</div>' +
                    '</div>';
            } else if (totalClasses === 4) {
                // 4차시: 4칸 테이블
                html += '<div class="program-header">' +
                    '<div>프로그램</div>' +
                    '<div>강사</div>' +
                    '<div>1-2차시</div>' +
                    '<div>3-4차시</div>' +
                    '</div>';
            } else if (totalClasses === 6) {
                // 6차시: 5칸 테이블
                html += '<div class="program-header">' +
                    '<div>프로그램</div>' +
                    '<div>강사</div>' +
                    '<div>1-2차시</div>' +
                    '<div>3-4차시</div>' +
                    '<div>5-6차시</div>' +
                    '</div>';
            }

            // 프로그램 행 생성
            for (var i = 0; i < planData.programs.length; i++) {
                var program = planData.programs[i];
                html += '<div class="program-row">' +
                    '<div class="program-cell" contenteditable="true">' + program.name + '</div>' +
                    '<div class="program-cell" contenteditable="true">' + program.instructor + '</div>';

                if (isAIEducation || totalClasses === 2) {
                    // AI교육 또는 2차시: 1-2차시 위치만 표시
                    html += '<div class="program-cell" contenteditable="true">' + 
                        (program.location || '') + '</div>';
                } else if (totalClasses === 4) {
                    // 4차시: 1-2차시, 3-4차시 위치 표시
                    html += '<div class="program-cell" contenteditable="true">' + 
                        (program.location || '') + '</div>' +
                        '<div class="program-cell" contenteditable="true">' + 
                        (program['3-4차시위치'] || '') + '</div>';
                } else if (totalClasses === 6) {
                    // 6차시: 1-2차시, 3-4차시, 5-6차시 위치 표시
                    html += '<div class="program-cell" contenteditable="true">' + 
                        (program.location || '') + '</div>' +
                        '<div class="program-cell" contenteditable="true">' + 
                        (program['3-4차시위치'] || '') + '</div>' +
                        '<div class="program-cell" contenteditable="true">' + 
                        (program['5-6차시위치'] || '') + '</div>';
                }

                html += '</div>';
            }

            // 진로체험의 경우 프로그램 수 체크
            if (!isAIEducation) {
                var expectedPrograms = Math.ceil(totalClasses / 2);
                if (planData.programs.length < expectedPrograms) {
                    // 부족한 프로그램 수만큼 빈칸오류 행 추가
                    for (var i = planData.programs.length; i < expectedPrograms; i++) {
                        html += '<div class="program-row" style="background-color: #ffebee;">' +
                            '<div class="program-cell" contenteditable="true">빈칸오류</div>' +
                            '<div class="program-cell" contenteditable="true"></div>';
                        
                        if (totalClasses === 4) {
                            html += '<div class="program-cell" contenteditable="true"></div>' +
                                '<div class="program-cell" contenteditable="true"></div>';
                        } else if (totalClasses === 6) {
                            html += '<div class="program-cell" contenteditable="true"></div>' +
                                '<div class="program-cell" contenteditable="true"></div>' +
                                '<div class="program-cell" contenteditable="true"></div>';
                        } else {
                            html += '<div class="program-cell" contenteditable="true"></div>';
                        }
                        
                        html += '</div>';
                    }
                }
            }

            html += '</div>' +
                '<div class="note-box">프로그램과 교실을 확인해주세요.<br>※ 학교측에서 배정한 교실로 당일 수업 이동을 안내합니다.</div>' +
                '</div>';
            
            // 시간표 섹션 추가
            html += '<div class="section">' +
                '<div class="section-title">시간표</div>' +
                '<div class="schedule-grid">' +
                '<div class="schedule-header">' +
                '<div>시간</div>' +
                '<div>내용</div>' +
                '</div>';

            // 시간표 행 생성
            for (var i = 0; i < planData.schedule.length; i++) {
                var item = planData.schedule[i];
                html += '<div class="schedule-row">' +
                    '<div class="schedule-cell">' + item.time + '</div>' +
                    '<div class="schedule-cell" contenteditable="true">' + item.content + '</div>' +
                    '</div>';
            }

            html += '</div>' +
                '<div class="note-box">일정을 확인 해주세요.<br>※시간은 현장 상황에 따라 달라질 수 있습니다.</div>' +
                '</div>' +
                '</div>' +
                '</div>' +
                
                '<div class="download-section">' +
                '<button class="save-btn" onclick="saveEdits()">💾 변경사항 저장</button>' +
                '<button class="download-btn" onclick="downloadAsImage()">🖼️ 이미지 다운로드</button>' +
                '<button class="download-btn" onclick="generatePDF()">📄 PDF 다운로드</button>' +
                '</div>';
            
            resultDiv.innerHTML = html;
        }

        function saveEdits() {
            var infoCells = document.querySelectorAll('.info-content[contenteditable="true"]');
            planData.school.name = infoCells[0].textContent;
            planData.school.date = infoCells[1].textContent;
            planData.school.target = infoCells[2].textContent;
            planData.school.time = infoCells[3].textContent;
            planData.school.location = infoCells[4].textContent;
            planData.school.contact = infoCells[5].textContent;

            var programCells = document.querySelectorAll('.program-cell[contenteditable="true"]');
            planData.programs = [];
            for (var i = 0; i < programCells.length; i += 3) {
                planData.programs.push({
                    name: programCells[i].textContent,
                    instructor: programCells[i + 1].textContent,
                    location: programCells[i + 2].textContent
                });
            }

            var scheduleCells = document.querySelectorAll('.schedule-cell[contenteditable="true"]');
            planData.schedule = [];
            for (var i = 0; i < scheduleCells.length; i += 2) {
                planData.schedule.push({
                    time: scheduleCells[i].textContent,
                    content: scheduleCells[i + 1].textContent
                });
            }

            alert('변경사항이 저장되었습니다.');
        }

        function generateScheduleFromTime(timeRange, totalClasses, schoolType) {
            var schedule = [];
            var timeParts = timeRange.split(' ~ ');
            if (timeParts.length !== 2) {
                return [
                    { time: '8:20', content: '학교 도착' },
                    { time: '8:50 ~ 9:35', content: '진로체험 및 진로교육 (1)' },
                    { time: '9:35 ~ 9:45', content: '쉬는 시간' },
                    { time: '9:45 ~ 10:30', content: '진로체험 및 진로교육 (2)' },
                    { time: '10:30 ~ 10:40', content: '쉬는 시간' },
                    { time: '10:40 ~ 11:25', content: '진로체험 및 진로교육 (3)' },
                    { time: '11:25 ~ 11:35', content: '쉬는 시간' },
                    { time: '11:35 ~ 12:20', content: '진로체험 및 진로교육 (4)' },
                    { time: '12:20 ~', content: '행사 종료' }
                ];
            }
            
            var startTime = timeParts[0].trim();
            var endTime = timeParts[1].trim();
            var startParts = startTime.split(':');
            var endParts = endTime.split(':');
            var startHour = parseInt(startParts[0]);
            var startMinute = parseInt(startParts[1]);
            var endHour = parseInt(endParts[0]);
            var endMinute = parseInt(endParts[1]);

            // 도착 시간 (30분 전)
            var arrivalHour = startHour;
            var arrivalMinute = startMinute - 30;
            if (arrivalMinute < 0) {
                arrivalHour -= 1;
                arrivalMinute += 60;
            }
            schedule.push({
                time: formatTimeSimple(arrivalHour, arrivalMinute),
                content: '학교 도착'
            });

            // 수업 및 휴식 계산
            var currentHour = startHour;
            var currentMinute = startMinute;
            var lessonDuration = (schoolType === 'high') ? 50 : 
                               (schoolType === 'middle') ? 45 : 40; // 고등학교 50분, 중학교 45분, 초등학교 40분
            var breakDuration = 10; // 휴식 10분
            var lunchDuration = 45; // 점심시간 45분
            var lessonCount = totalClasses;

            for (var i = 0; i < lessonCount; i++) {
                var lessonStartHour = currentHour;
                var lessonStartMinute = currentMinute;
                var lessonEndHour = lessonStartHour;
                var lessonEndMinute = lessonStartMinute + lessonDuration;
                if (lessonEndMinute >= 60) {
                    lessonEndHour += 1;
                    lessonEndMinute -= 60;
                }
                schedule.push({
                    time: formatTimeSimple(lessonStartHour, lessonStartMinute) + ' ~ ' + formatTimeSimple(lessonEndHour, lessonEndMinute),
                    content: '진로체험 및 진로교육 (' + (i + 1) + ')'
                });

                // 6차시일 때 4교시 후 점심시간 추가
                if (lessonCount === 6 && i === 3) {
                    var lunchStartHour = lessonEndHour;
                    var lunchStartMinute = lessonEndMinute;
                    var lunchEndHour = lunchStartHour;
                    var lunchEndMinute = lunchStartMinute + lunchDuration;
                    if (lunchEndMinute >= 60) {
                        lunchEndHour += 1;
                        lunchEndMinute -= 60;
                    }
                    schedule.push({
                        time: formatTimeSimple(lunchStartHour, lunchStartMinute) + ' ~ ' + formatTimeSimple(lunchEndHour, lunchEndMinute),
                        content: '점심시간'
                    });
                    currentHour = lunchEndHour;
                    currentMinute = lunchEndMinute;
                    continue; // 점심 후 바로 다음 교시로
                }

                // 마지막 수업이 아닌 경우 휴식 추가
                if (i < lessonCount - 1) {
                    var breakEndHour = lessonEndHour;
                    var breakEndMinute = lessonEndMinute + breakDuration;
                    if (breakEndMinute >= 60) {
                        breakEndHour += 1;
                        breakEndMinute -= 60;
                    }
                    schedule.push({
                        time: formatTimeSimple(lessonEndHour, lessonEndMinute) + ' ~ ' + formatTimeSimple(breakEndHour, breakEndMinute),
                        content: '쉬는 시간'
                    });
                    currentHour = breakEndHour;
                    currentMinute = breakEndMinute;
                } else {
                    currentHour = lessonEndHour;
                    currentMinute = lessonEndMinute;
                }
            }

            // 종료
            schedule.push({
                time: formatTimeSimple(currentHour, currentMinute) + ' ~',
                content: '행사 종료'
            });

            return schedule;
        }

        function formatTimeSimple(hour, minute) {
            return hour + ':' + (minute < 10 ? '0' + minute : minute);
        }

        function downloadAsImage() {
            var planResult = document.querySelector('.education-plan');
            
            // 로딩 표시
            var loadingDiv = document.createElement('div');
            loadingDiv.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0,0,0,0.8);
                color: white;
                padding: 20px 40px;
                border-radius: 10px;
                z-index: 10000;
                font-size: 16px;
            `;
            loadingDiv.textContent = '고해상도 이미지 생성 중... 잠시만 기다려주세요.';
            document.body.appendChild(loadingDiv);
            
            // 3초 딜레이 후 이미지 생성 시작 (더 긴 딜레이)
            setTimeout(() => {
                // 고해상도 설정
                var scale = 2; // 2배 스케일링
                var width = planResult.offsetWidth * scale;
                var height = planResult.offsetHeight * scale;
                
                domtoimage.toBlob(planResult, {
                    quality: 1.0,
                    bgcolor: '#ffffff',
                    width: width,
                    height: height,
                    style: {
                        'transform': 'scale(' + scale + ')',
                        'transform-origin': 'top left',
                        'width': planResult.offsetWidth + 'px',
                        'height': planResult.offsetHeight + 'px'
                    },
                    filter: function(node) {
                        // 배경 이미지나 외부 리소스 제외
                        return !(node instanceof HTMLImageElement && node.src.startsWith('data:'));
                    }
                })
                .then(function(blob) {
                    var link = document.createElement('a');
                    link.href = URL.createObjectURL(blob);
                    link.download = selectedDate.replace(/\./g, '') + '_' + document.getElementById('schoolSelect').value + '_교육계획서_HD.png';
                    link.click();
                    
                    // 로딩 표시 제거
                    document.body.removeChild(loadingDiv);
                })
                .catch(function(error) {
                    console.error('이미지 생성 실패:', error);
                    alert('이미지 생성 중 오류가 발생했습니다. 콘솔을 확인해주세요.');
                    
                    // 로딩 표시 제거
                    document.body.removeChild(loadingDiv);
                });
            }, 3000); // 3초 딜레이로 증가
        }

        function generatePDF() {
            if (!planData) {
                alert('계획서가 생성되지 않았습니다. 먼저 계획서를 생성해주세요.');
                return;
            }
            var content = generateDocContent();
            alert('PDF 생성 기능은 개발 중입니다. 이미지 다운로드를 이용해주세요.');
        }

        function generateDocContent() {
            var content = `압도적 유익한 DREAMPLEX 교육계획서\n\n`;
            content += `📋 기본사항\n`;
            content += `- 교육장소: ${planData.school.name}\n`;
            content += `- 교육일시: ${planData.school.date}\n`;
            content += `- 교육지역: ${planData.school.location}\n`;
            content += `- 교육시간: ${planData.school.time}\n`;
            content += `- 총 차시: ${planData.school.totalClasses}차시\n`;
            content += `- 담당자: ${planData.school.contact}\n\n`;

            content += `👥 프로그램 상세\n`;
            content += `| 프로그램 | 강사 | 위치 |\n`;
            content += `|----------|------|------|\n`;
            planData.programs.forEach(program => {
                content += `| ${program.name} | ${program.instructor} | ${program.location} |\n`;
            });
            content += `\n⏰ 시간계획\n`;
            content += `| 시간 | 내용 |\n`;
            content += `|------|------|\n`;
            planData.schedule.forEach(item => {
                content += `| ${item.time} | ${item.content} |\n`;
            });

            return content;
        }

        // 교통비 계산 관련 변수
        var transportData = {
            distance: 0,
            duration: 0,
            tollFee: 0,
            fuelCost: 0,
            totalCost: 0
        };

        // 네이버 Maps API 설정
        var NAVER_CLIENT_ID = '9mmamp7jeu';
        var NAVER_CLIENT_SECRET = '0Hn2tdicEB1HOkV3TwWusuYkZGSnADXoeZWW8EpB';

        // Google Apps Script URL (실제 배포 후 URL로 교체 필요)
        var GAS_URL = 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec';

        // 교통비 계산 함수
        function calculateTransportCost() {
            if (!planData || !planData.school) {
                showNoRouteData();
                return;
            }

            showLoadingRoute();
            
            // Google Apps Script를 통한 네이버 API 호출
            var requestData = {
                origin: '대구광역시',
                destination: planData.school.name,
                clientId: NAVER_CLIENT_ID,
                clientSecret: NAVER_CLIENT_SECRET
            };

            // 실제 Google Apps Script 호출
            fetch(GAS_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success' || data.status === 'simulated') {
                    transportData = {
                        distance: data.data.distance,
                        duration: data.data.duration,
                        tollFee: data.data.tollFee,
                        fuelCost: 0,
                        totalCost: 0
                    };
                    updateTransportDisplay();
                } else {
                    // 오류 시 시뮬레이션 데이터 사용
                    simulateRouteCalculation(requestData);
                }
                hideLoadingRoute();
            })
            .catch(error => {
                console.error('API 호출 오류:', error);
                // 네트워크 오류 시 시뮬레이션 데이터 사용
                simulateRouteCalculation(requestData);
                hideLoadingRoute();
            });
        }

        // 경로 계산 시뮬레이션 (실제로는 Google Apps Script에서 처리)
        function simulateRouteCalculation(data) {
            // 시뮬레이션 데이터 (실제로는 네이버 API 응답)
            var distance = Math.floor(Math.random() * 50) + 20; // 20-70km
            var duration = Math.floor(distance * 1.5); // 분 단위
            var tollFee = distance > 30 ? Math.floor(distance * 50) : 0; // 30km 이상시 통행료

            transportData = {
                distance: distance,
                duration: duration,
                tollFee: tollFee,
                fuelCost: 0,
                totalCost: 0
            };

            updateTransportDisplay();
            hideLoadingRoute();
        }

        // 교통비 표시 업데이트
        function updateTransportDisplay() {
            var fuelEfficiency = parseFloat(document.getElementById('fuelEfficiency').value);
            var fuelPrice = parseFloat(document.getElementById('fuelPrice').value);

            // 연료비 계산 (왕복)
            var roundTripDistance = transportData.distance * 2;
            var fuelUsed = roundTripDistance / fuelEfficiency;
            var fuelCost = Math.round(fuelUsed * fuelPrice);

            // 총 비용 계산
            var totalCost = fuelCost + (transportData.tollFee * 2);

            transportData.fuelCost = fuelCost;
            transportData.totalCost = totalCost;

            // 화면 업데이트
            document.getElementById('destinationSchool').textContent = planData.school.name;
            document.getElementById('totalDistance').textContent = roundTripDistance + 'km';
            document.getElementById('estimatedTime').textContent = Math.floor(transportData.duration * 2 / 60) + '시간 ' + (transportData.duration * 2 % 60) + '분';
            
            document.getElementById('fuelCost').textContent = fuelCost.toLocaleString() + '원';
            document.getElementById('tollCost').textContent = (transportData.tollFee * 2).toLocaleString() + '원';
            document.getElementById('totalCost').textContent = totalCost.toLocaleString() + '원';

            // 카풀비 계산
            document.getElementById('carpool2').textContent = Math.round(totalCost / 2).toLocaleString() + '원';
            document.getElementById('carpool3').textContent = Math.round(totalCost / 3).toLocaleString() + '원';
            document.getElementById('carpool4').textContent = Math.round(totalCost / 4).toLocaleString() + '원';

            showRouteCalculation();
        }

        // 카카오톡 공유 텍스트 복사
        function copyKakaoText() {
            if (!transportData || transportData.totalCost === 0) {
                alert('먼저 교통비를 계산해주세요.');
                return;
            }

            var kakaoText = generateKakaoText();
            
            // 클립보드에 복사
            navigator.clipboard.writeText(kakaoText).then(() => {
                alert('카카오톡용 텍스트가 복사되었습니다!');
            }).catch(() => {
                // 폴백: 텍스트 영역 생성
                var textArea = document.createElement('textarea');
                textArea.value = kakaoText;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('카카오톡용 텍스트가 복사되었습니다!');
            });
        }

        // 카카오톡용 텍스트 생성
        function generateKakaoText() {
            var text = '';
            text += '🚗💰 DREAMPLEX 카풀비 안내\n';
            text += '━━━━━━━━━━━━━━━━━━━\n';
            text += `📍 ${planData.school.name} (${planData.school.date})\n`;
            text += '━━━━━━━━━━━━━━━━━━━\n';
            text += `⛽ 왕복 연료비: ${transportData.fuelCost.toLocaleString()}원\n`;
            text += `🛣️ 왕복 통행료: ${(transportData.tollFee * 2).toLocaleString()}원\n`;
            text += `💰 총 교통비: ${transportData.totalCost.toLocaleString()}원\n`;
            text += '━━━━━━━━━━━━━━━━━━━\n';
            text += '👥 탑승자별 부담금:\n';
            text += `- 2명: ${Math.round(transportData.totalCost / 2).toLocaleString()}원/인\n`;
            text += `- 3명: ${Math.round(transportData.totalCost / 3).toLocaleString()}원/인\n`;
            text += `- 4명: ${Math.round(transportData.totalCost / 4).toLocaleString()}원/인\n`;
            text += '━━━━━━━━━━━━━━━━━━━\n';
            text += '💡 운전 수고비 포함 금액입니다';
            
            return text;
        }

        // UI 표시 함수들
        function showRouteCalculation() {
            document.getElementById('routeCalculation').style.display = 'block';
            document.getElementById('noRouteData').style.display = 'none';
        }

        function showLoadingRoute() {
            document.getElementById('loadingRoute').style.display = 'block';
            document.getElementById('routeCalculation').style.display = 'none';
            document.getElementById('noRouteData').style.display = 'none';
        }

        function hideLoadingRoute() {
            document.getElementById('loadingRoute').style.display = 'none';
        }

        function showNoRouteData() {
            document.getElementById('routeCalculation').style.display = 'none';
            document.getElementById('loadingRoute').style.display = 'none';
            document.getElementById('noRouteData').style.display = 'block';
        }

        // 연비/유류비 설정 변경 시 재계산
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('fuelEfficiency').addEventListener('change', function() {
                if (transportData.totalCost > 0) {
                    updateTransportDisplay();
                }
            });
            
            document.getElementById('fuelPrice').addEventListener('change', function() {
                if (transportData.totalCost > 0) {
                    updateTransportDisplay();
                }
            });
        });

        // Google Apps Script 연동 함수들
        function callGoogleAppsScript(requestData) {
            // Google Apps Script URL (실제 배포 후 URL로 교체 필요)
            var GAS_URL = 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec';
            
            return fetch(GAS_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .catch(error => {
                console.error('Google Apps Script 호출 오류:', error);
                return null;
            });
        }

        // 네이버 Maps API 직접 호출 (CORS 우회용)
        function callNaverMapsAPI(origin, destination) {
            // 네이버 Maps API 직접 호출 시뮬레이션
            // 실제로는 Google Apps Script를 통해 호출해야 함
            return new Promise((resolve) => {
                setTimeout(() => {
                    // 시뮬레이션 데이터
                    var distance = Math.floor(Math.random() * 50) + 20; // 20-70km
                    var duration = Math.floor(distance * 1.5); // 분 단위
                    var tollFee = calculateTollFee(distance);
                    
                    resolve({
                        status: 'success',
                        data: {
                            distance: distance,
                            duration: duration,
                            tollFee: tollFee
                        }
                    });
                }, 1000);
            });
        }

        // 통행료 계산 함수
        function calculateTollFee(distance) {
            if (distance <= 30) {
                return 0; // 30km 이하 무료
            } else if (distance <= 50) {
                return Math.round(distance * 30); // 30-50km: km당 30원
            } else {
                return Math.round(distance * 50); // 50km 이상: km당 50원
            }
        }

        // 교통비 계산 함수 수정
        function calculateTransportCost() {
            if (!planData || !planData.school) {
                showNoRouteData();
                return;
            }

            showLoadingRoute();
            
            var requestData = {
                origin: '대구광역시',
                destination: planData.school.name,
                clientId: NAVER_CLIENT_ID,
                clientSecret: NAVER_CLIENT_SECRET
            };

            // Google Apps Script 호출 시도
            callGoogleAppsScript(requestData)
                .then(data => {
                    if (data && (data.status === 'success' || data.status === 'simulated')) {
                        transportData = {
                            distance: data.data.distance,
                            duration: data.data.duration,
                            tollFee: data.data.tollFee,
                            fuelCost: 0,
                            totalCost: 0
                        };
                        updateTransportDisplay();
                    } else {
                        // Google Apps Script 실패 시 네이버 API 직접 호출
                        return callNaverMapsAPI(requestData.origin, requestData.destination);
                    }
                })
                .then(data => {
                    if (data && data.status === 'success') {
                        transportData = {
                            distance: data.data.distance,
                            duration: data.data.duration,
                            tollFee: data.data.tollFee,
                            fuelCost: 0,
                            totalCost: 0
                        };
                        updateTransportDisplay();
                    } else {
                        // 모든 API 실패 시 시뮬레이션 데이터 사용
                        simulateRouteCalculation(requestData);
                    }
                })
                .catch(error => {
                    console.error('API 호출 오류:', error);
                    simulateRouteCalculation(requestData);
                })
                .finally(() => {
                    hideLoadingRoute();
                });
        }

        // Google Apps Script 배포 가이드 함수
        function showGoogleAppsScriptGuide() {
            var guide = `
Google Apps Script 설정 가이드:

1. https://script.google.com/ 접속
2. 새 프로젝트 생성
3. 다음 코드를 붙여넣기:

function doPost(e) {
  try {
    var data = JSON.parse(e.postData.contents);
    var origin = data.origin;
    var destination = data.destination;
    var clientId = data.clientId;
    var clientSecret = data.clientSecret;
    
    var routeData = getRouteFromNaver(origin, destination, clientId, clientSecret);
    
    return ContentService.createTextOutput(JSON.stringify(routeData))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      'status': 'error',
      'message': error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

function getRouteFromNaver(origin, destination, clientId, clientSecret) {
  var url = 'https://naveropenapi.apigw.ntruss.com/map-direction/v1/driving';
  var params = {
    'start': origin,
    'goal': destination,
    'avoid': 'toll'
  };
  
  var options = {
    'method': 'GET',
    'headers': {
      'X-NCP-APIGW-API-KEY-ID': clientId,
      'X-NCP-APIGW-API-KEY': clientSecret
    },
    'muteHttpExceptions': true
  };
  
  var queryString = Object.keys(params).map(function(key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  
  var fullUrl = url + '?' + queryString;
  
  try {
    var response = UrlFetchApp.fetch(fullUrl, options);
    var responseCode = response.getResponseCode();
    var responseText = response.getContentText();
    
    if (responseCode === 200) {
      var routeData = JSON.parse(responseText);
      return processRouteData(routeData);
    } else {
      return getSimulatedRouteData(origin, destination);
    }
    
  } catch (error) {
    return getSimulatedRouteData(origin, destination);
  }
}

function processRouteData(routeData) {
  try {
    var route = routeData.route.traoptimal[0];
    var summary = route.summary;
    
    var distance = Math.round(summary.distance / 1000);
    var duration = Math.round(summary.duration / 60000);
    var tollFee = calculateTollFee(distance);
    
    return {
      'status': 'success',
      'data': {
        'distance': distance,
        'duration': duration,
        'tollFee': tollFee,
        'route': route
      }
    };
    
  } catch (error) {
    return getSimulatedRouteData('대구광역시', '목적지');
  }
}

function calculateTollFee(distance) {
  if (distance <= 30) {
    return 0;
  } else if (distance <= 50) {
    return Math.round(distance * 30);
  } else {
    return Math.round(distance * 50);
  }
}

function getSimulatedRouteData(origin, destination) {
  var distance = Math.floor(Math.random() * 50) + 20;
  var duration = Math.floor(distance * 1.5);
  var tollFee = calculateTollFee(distance);
  
  return {
    'status': 'simulated',
    'data': {
      'distance': distance,
      'duration': duration,
      'tollFee': tollFee,
      'message': '실제 경로 데이터를 가져올 수 없어 추정값을 사용합니다.'
    }
  };
}

4. 배포 > 새 배포
5. 유형: 웹 앱, 실행: 나, 액세스 권한: 모든 사용자
6. 배포 후 URL을 복사하여 HTML의 GAS_URL에 입력
            `;
            
            console.log(guide);
            alert('Google Apps Script 설정 가이드가 콘솔에 출력되었습니다. F12를 눌러 확인하세요.');
        }
    </script>
</body>
</html>
